#!/usr/bin/env node

import sharp from 'sharp';
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const config = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
  hero: {
    quality: 85,
    suffix: '.webp',
    fallbackQuality: 90, // –¥–ª—è PNG fallback
  },
  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ)
  reviews: {
    quality: 75,
    suffix: '.webp',
    fallbackQuality: 80,
    maxWidth: 800, // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
  },
  // –ò–∫–æ–Ω–∫–∏ (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä)
  icons: {
    quality: 90,
    suffix: '.webp',
    fallbackQuality: 95,
  }
};

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const optimizationTargets = {
  hero: ['me.png', 'english.png', 'EGE.png', 'Mark.png'],
  icons: ['telegram.png', 'instagram.png', 'whatsapp.png', 'logo.png'],
  reviews: [] // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
};

async function getFileSize(filePath) {
  try {
    const stats = await fs.stat(filePath);
    return stats.size;
  } catch {
    return 0;
  }
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

async function optimizeImage(inputPath, outputPath, options = {}) {
  try {
    const { quality = 80, maxWidth, format = 'webp' } = options;
    
    let pipeline = sharp(inputPath);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if (maxWidth) {
      pipeline = pipeline.resize({ width: maxWidth, withoutEnlargement: true });
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (format === 'webp') {
      pipeline = pipeline.webp({ quality, effort: 6 });
    } else if (format === 'png') {
      pipeline = pipeline.png({ quality, compressionLevel: 9 });
    }
    
    await pipeline.toFile(outputPath);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${inputPath}:`, error.message);
    return false;
  }
}

async function createOptimizedVersions(category, files) {
  const publicDir = './public';
  const config_cat = config[category];
  
  console.log(`\nüîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º ${category} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...`);
  
  let totalOriginalSize = 0;
  let totalOptimizedSize = 0;
  
  for (const filename of files) {
    const inputPath = path.join(publicDir, filename);
    const name = path.parse(filename).name;
    const webpPath = path.join(publicDir, `${name}.webp`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const originalSize = await getFileSize(inputPath);
    if (originalSize === 0) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      continue;
    }
    
    console.log(`   üì∏ ${filename} (${formatBytes(originalSize)})`);
    
    // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
    const webpSuccess = await optimizeImage(inputPath, webpPath, {
      quality: config_cat.quality,
      maxWidth: config_cat.maxWidth,
      format: 'webp'
    });
    
    if (webpSuccess) {
      const webpSize = await getFileSize(webpPath);
      const savings = ((originalSize - webpSize) / originalSize * 100).toFixed(1);
      console.log(`   ‚úÖ ${name}.webp (${formatBytes(webpSize)}) - —ç–∫–æ–Ω–æ–º–∏—è ${savings}%`);
      
      totalOriginalSize += originalSize;
      totalOptimizedSize += webpSize;
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PNG –¥–ª—è fallback
    const optimizedPngPath = path.join(publicDir, `${name}_optimized.png`);
    const pngSuccess = await optimizeImage(inputPath, optimizedPngPath, {
      quality: config_cat.fallbackQuality,
      maxWidth: config_cat.maxWidth,
      format: 'png'
    });
    
    if (pngSuccess) {
      const pngSize = await getFileSize(optimizedPngPath);
      // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –µ—Å–ª–∏ –æ–Ω–∞ –º–µ–Ω—å—à–µ
      if (pngSize < originalSize) {
        await fs.rename(optimizedPngPath, inputPath);
        console.log(`   üîß PNG –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω (${formatBytes(pngSize)})`);
      } else {
        await fs.unlink(optimizedPngPath);
        console.log(`   ‚ÑπÔ∏è  PNG –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —É–ª—É—á—à–µ–Ω–∏–π`);
      }
    }
  }
  
  if (totalOriginalSize > 0) {
    const totalSavings = ((totalOriginalSize - totalOptimizedSize) / totalOriginalSize * 100).toFixed(1);
    console.log(`\nüìä ${category.toUpperCase()} –∏—Ç–æ–≥–æ:`);
    console.log(`   –î–æ: ${formatBytes(totalOriginalSize)}`);
    console.log(`   –ü–æ—Å–ª–µ: ${formatBytes(totalOptimizedSize)}`);
    console.log(`   –≠–∫–æ–Ω–æ–º–∏—è: ${totalSavings}% (${formatBytes(totalOriginalSize - totalOptimizedSize)})`);
  }
}

async function findReviewImages() {
  const publicDir = './public';
  try {
    const files = await fs.readdir(publicDir);
    return files.filter(file => file.startsWith('IMG_') && file.endsWith('.png'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ public:', error);
    return [];
  }
}

async function main() {
  console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Æ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô\n');
  console.log('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
  optimizationTargets.reviews = await findReviewImages();
  console.log(`–ù–∞–π–¥–µ–Ω–æ ${optimizationTargets.reviews.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∑—ã–≤–æ–≤`);
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  for (const [category, files] of Object.entries(optimizationTargets)) {
    if (files.length > 0) {
      await createOptimizedVersions(category, files);
    }
  }
  
  console.log('\n‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
  console.log('\nüìù –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω—ã WebP –≤–µ—Ä—Å–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
  console.log('   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã PNG —Ñ–∞–π–ª—ã –¥–ª—è fallback');
  console.log('   ‚Ä¢ –°–∂–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã 800px');
  console.log('\nüîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–¥–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebP');
  console.log('   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å fallback –Ω–∞ PNG –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤');
  console.log('   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
main().catch(console.error);

export { optimizeImage, createOptimizedVersions };