import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';

export const ExitIntentPopup: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [hasShown, setHasShown] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccessOpen, setIsSuccessOpen] = useState(false);

  // –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞

  useEffect(() => {
    const handleMouseLeave = (e: MouseEvent) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä —É—Ö–æ–¥–∏—Ç –≤ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ –∏–ª–∏ –ø–æ–∫–∏–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
      if ((e.clientY <= 0 || e.relatedTarget === null) && !hasShown && !isOpen) {
        setIsOpen(true);
        setHasShown(true);
        localStorage.setItem('exitIntentShown', 'true');
      }
    };

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É/—Å—Ç—Ä–∞–Ω–∏—Ü—É
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (!hasShown && !isOpen) {
        e.preventDefault();
        setIsOpen(true);
        setHasShown(true);
        localStorage.setItem('exitIntentShown', 'true');
        return '';
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ –ø–æ–ø–∞–ø
    const alreadyShown = localStorage.getItem('exitIntentShown');
    if (alreadyShown) {
      setHasShown(true);
      return;
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–±—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º 10 —Å–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const timer = setTimeout(() => {
      document.addEventListener('mouseleave', handleMouseLeave);
      window.addEventListener('beforeunload', handleBeforeUnload);
    }, 10000);

    return () => {
      clearTimeout(timer);
      document.removeEventListener('mouseleave', handleMouseLeave);
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [hasShown, isOpen]);

  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    if (isSubmitting) return;
    setIsSubmitting(true);
    const form = e.currentTarget;
    const formData = new FormData(form);

    const name = (formData.get('name') as string || '').trim();
    const contact = (formData.get('contact') as string || '').trim();

    try {
      const botToken = '8059904436:AAF8kJbXOKbMgv6tvq5hMCEmvorfHt608ow';
      const chatId = '-1002835359630';
      const message = `\nüö® EXIT-INTENT LEAD!\n\nüë§ –ò–º—è: ${name || '‚Äî'}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç: ${contact || '‚Äî'}\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\nüåê –ò—Å—Ç–æ—á–Ω–∏–∫: Exit Intent Popup\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ü–µ—Ä–≤—ã–π –±–ª–æ–∫ –∑–∞ 17.000‚ÇΩ`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–≤ —Ñ–æ–Ω–µ)
      try {
        fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ chat_id: chatId, text: message }),
        }).catch(() => {});
      } catch {}

      form.reset();
      setIsOpen(false);
      setIsSuccessOpen(true);
    } catch {
      setIsOpen(false);
      setIsSuccessOpen(true);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="bg-gradient-to-br from-red-50 to-orange-50 border-2 border-red-200 shadow-2xl sm:max-w-md animate-in zoom-in-95 duration-300">
          <DialogHeader className="text-center">
            <div className="mx-auto mb-4 w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
              <span className="text-3xl">‚è∞</span>
            </div>
            <DialogTitle className="font-arsenal text-2xl text-red-800">
              –°—Ç–æ–π! –ù–µ —É—Ö–æ–¥–∏ –ø–æ–∫–∞!
            </DialogTitle>
            <DialogDescription className="font-anonymous text-red-700 text-lg">
              –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è ‚Äî <span className="font-bold">—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞</span> –Ω–∞ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —É—Ä–æ–∫–æ–≤
            </DialogDescription>
          </DialogHeader>
          
          <div className="text-center py-4">
            <div className="bg-red-600 text-white rounded-xl p-4 mb-4">
              <p className="font-arsenal text-lg font-bold">–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï</p>
              <p className="font-arsenal text-3xl font-bold">4 —É—Ä–æ–∫–∞ –∑–∞ 17.000‚ÇΩ</p>
              <p className="font-anonymous text-sm opacity-90">–≤–º–µ—Å—Ç–æ 19.000‚ÇΩ</p>
            </div>
            <p className="font-anonymous text-black/70 text-sm mb-4">
              üî• –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è<br/>
              ‚ö° –û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
            </p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-3">
            <input 
              name="name" 
              placeholder="–¢–≤–æ—ë –∏–º—è" 
              required
              className="w-full px-4 py-3 rounded-lg bg-white border border-red-200 text-black placeholder-black/50 font-arsenal text-sm font-bold focus:border-red-400 focus:outline-none" 
            />
            <input 
              name="contact" 
              placeholder="Telegram –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω" 
              required
              className="w-full px-4 py-3 rounded-lg bg-white border border-red-200 text-black placeholder-black/50 font-arsenal text-sm font-bold focus:border-red-400 focus:outline-none" 
            />
            
            <DialogFooter className="gap-2">
              <Button 
                type="button"
                variant="outline"
                onClick={() => setIsOpen(false)}
                className="border-red-200 text-red-600 hover:bg-red-50"
              >
                –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ
              </Button>
              <Button 
                type="submit" 
                disabled={isSubmitting} 
                className="bg-red-600 text-white font-arsenal font-bold hover:bg-red-700 flex-1"
              >
                {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º‚Ä¶' : 'üéØ –ü–æ–ª—É—á–∏—Ç—å –∑–∞ 17.000‚ÇΩ'}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Success Popup */}
      <Dialog open={isSuccessOpen} onOpenChange={setIsSuccessOpen}>
        <DialogContent className="bg-white/95 backdrop-blur-md border border-white/40 shadow-2xl sm:max-w-md text-center">
          <div className="mx-auto mb-2 w-14 h-14 rounded-full flex items-center justify-center" style={{ background: 'linear-gradient(135deg, #DC2626, #EF4444)' }}>
            <span className="text-white text-2xl">üéâ</span>
          </div>
          <DialogTitle className="font-arsenal text-2xl text-black">–°—É–ø–µ—Ä! –°–∫–∏–¥–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞</DialogTitle>
          <DialogDescription className="font-anonymous text-black/70">
            –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –∏ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è!
          </DialogDescription>
          <div className="mt-4">
            <Button onClick={() => setIsSuccessOpen(false)} className="bg-red-600 text-white font-arsenal font-bold hover:bg-red-700 w-full">
              –û—Ç–ª–∏—á–Ω–æ!
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};