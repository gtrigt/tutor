#!/usr/bin/env node

import sharp from 'sharp';
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const config = {
  quality: 80,
  formats: ['webp', 'avif'],
  sizes: {
    thumbnail: 300,
    medium: 800,
    large: 1200
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function optimizeImage(inputPath, outputDir, filename) {
  try {
    const image = sharp(inputPath);
    const metadata = await image.metadata();
    
    // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
    await image
      .webp({ quality: config.quality })
      .toFile(path.join(outputDir, `${filename}.webp`));
    
    // –°–æ–∑–¥–∞–µ–º AVIF –≤–µ—Ä—Å–∏—é (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    try {
      await sharp(inputPath)
        .avif({ quality: config.quality })
        .toFile(path.join(outputDir, `${filename}.avif`));
    } catch (e) {
      console.log(`AVIF –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è ${filename}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    for (const [sizeName, size] of Object.entries(config.sizes)) {
      await image
        .resize(size, null, { withoutEnlargement: true })
        .webp({ quality: config.quality })
        .toFile(path.join(outputDir, `${filename}-${sizeName}.webp`));
    }
    
    console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${filename}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${filename}:`, error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function optimizeAllImages() {
  const imageDirs = [
    'public/images/hero',
    'public/images/blog',
    'public/images/reviews',
    'public/images/icons'
  ];
  
  for (const dir of imageDirs) {
    try {
      await fs.access(dir);
      console.log(`\nüñºÔ∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏: ${dir}`);
      
      const files = await fs.readdir(dir);
      const imageFiles = files.filter(file => 
        /\.(png|jpg|jpeg)$/i.test(file)
      );
      
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`);
      
      for (const file of imageFiles) {
        const inputPath = path.join(dir, file);
        const filename = path.parse(file).name;
        console.log(`   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${file}`);
        await optimizeImage(inputPath, dir, filename);
      }
    } catch (error) {
      console.log(`   –ü–∞–ø–∫–∞ ${dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
optimizeAllImages().then(() => {
  console.log('\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
});

export { optimizeAllImages }; 